- title: JavaScript 中的历史 RegExp 特性
  id: proposal-regexp-legacy-features
  presented:
    - date: May&#xA0;2017
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2017-05/may-25.md#15ia-regexp-legacy-features-for-stage-3
  has_specification: false
  description: 该提案规范了 JavaScript 中已废弃的 RegExp 特性，即构造函数的静态属性以及 RegExp.prototype.compile 方法。
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  tests:
    - 'https://github.com/tc39/test262/pull/2650'
- title: Hashbang 语法
  id: proposal-hashbang
  example: |-
    #!/usr/bin/env node
    // in the Module Goal
    export {};
    console.log(1);
  presented:
    - date: November&#xA0;2018
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2018-11/nov-28.md#hash-bang-grammar
  has_specification: true
  description: 该提案意在配合一些允许/需要使用 Hashbang 的 JS 环境。在这种环境中，目前它们需要先删除 hashbang 以生成有效的 JS 代码。该提案将统一和规范这种做法。
  authors:
    - Bradley Farias
  champions:
    - Bradley Farias
  tests:
    - 'https://github.com/tc39/test262/pull/2065'
- title: 顶层 <code>await</code>
  id: proposal-top-level-await
  example: |-
    // file.html
    &#x3C;script type=module src=&#x22;a.mjs&#x22;&#x3E;&#x3C;/script&#x3E;
    // a.mjs
    await import(&#x22;./b.mjs&#x22;);
    // b.mjs
    await import(&#x22;./a.mjs&#x22;);
  presented:
    - date: June&#xA0;2019
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2019-06/june-6.md#top-level-await-for-stage-3
  has_specification: true
  description: 该提案让我们依靠模块系统本身来处理所有这些 Promise，并确保模块以正确方式加载。
  authors:
    - Myles Borins
  champions:
    - Myles Borins
  tests:
    - 'https://github.com/tc39/test262/pull/2274'
- title: RegExp Match Indices
  id: proposal-regexp-match-indices
  example: |-
    const re1 = /a+(?&#x3C;Z&#x3E;z)?/;
    // indices are relative to start of the input string:
    const s1 = &#x22;xaaaz&#x22;;
    const m1 = re1.exec(s1);
    m1.indices[0][0] === 1;
    m1.indices[0][1] === 5;
    s1.slice(...m1.indices[0]) === &#x22;aaaz&#x22;;
    m1.indices[1][0] === 4;
    m1.indices[1][1] === 5;
    s1.slice(...m1.indices[1]) === &#x22;z&#x22;;
    m1.indices.groups[&#x22;Z&#x22;][0] === 4;
    m1.indices.groups[&#x22;Z&#x22;][1] === 5;
    s1.slice(...m1.indices.groups[&#x22;Z&#x22;]) === &#x22;z&#x22;;
    // capture groups that are not matched return &#x60;undefined&#x60;:
    const m2 = re1.exec(&#x22;xaaay&#x22;);
    m2.indices[1] === undefined;
    m2.indices.groups[&#x22;Z&#x22;] === undefined;
  presented:
    - date: December&#xA0;2019
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2019-12/december-3.md#regexp-match-indices-performance-feedback
  has_specification: false
  description: 该提案提供了 RegExp 中捕获的子串相对于输入字符串开始的起始和结束索引的附加信息。
  authors:
    - Ron Buckton
  champions:
    - Ron Buckton
  tests:
    - 'https://github.com/tc39/test262/pull/2309'
- title: <code>Atomics.waitAsync</code>
  id: proposal-atomics-wait-async
  presented:
    - date: December&#xA0;2019
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2019-12/december-4.md#atomicswaitasync-for-stage-3
  has_specification: true
  description: 该提案为 Atomics 添加一个异步的 <code>wait</code>，用于不允许阻塞线程的环境。
  authors:
    - Lars Hansen
  champions:
    - Shu-yu Guo
    - Lars Hansen
  tests:
    - 'https://github.com/tc39/test262/issues/2511'
- title: <code>.at()</code>
  id: proposal-relative-indexing-method
  example: |-
    var list = ["apple", "orange", "banana"];
    list.at(-1) // banana, using negative index
    list.at(0)  // apple
    list.at(1)  // orange
    list.at(2)  // banana
  presented:
    - date: September&#xA0;2020
      url: at
  has_specification: true
  description: 该提案计划在所有可索引类（<code>Array</code>、<code>String</code>、<code>TypedArray</code>）中添加一个<code>.at()</code>方法。该方法允许负数索引。
  authors:
    - Shu-yu Guo
    - Tab Atkins
  champions:
    - Shu-yu Guo
    - Tab Atkins
  tests:
    - 'https://github.com/tc39/test262/pull/2812'
- title: import 断言
  id: proposal-import-assertions
  example: >-
    new Worker(&#x22;foo.wasm&#x22;, { type: &#x22;module&#x22;, assert: { type:
    &#x22;webassembly&#x22; } });
  presented:
    - date: September&#xA0;2020
      url: import-assertions
  has_specification: true
  description: 该提案为 `import` 语句添加了断言语法。如果模块不符合期望的断言，则导入会失败。
  authors:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
  champions:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
- title: JSON Modules
  id: proposal-json-modules
  example: >-
    import json from &#x22;./foo.json&#x22; assert { type: &#x22;json&#x22; };
  presented:
    - date: January&#xA0;2021
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2021-01/jan-25.md#json-modules-for-stage-3
  has_specification: true
  description: Proposal to import JSON files as modules.
  authors:
    - Sven Sauleau
    - Daniel Ehrenberg
    - Myles Borins
    - Dan Clark
  champions:
    - Sven Sauleau
    - Daniel Ehrenberg
    - Myles Borins
    - Dan Clark
- title: Ergonomic Brand Checks
  id: proposal-private-fields-in-in
  example: >-
    class C {
      #brand;
      #method() {}
      get #getter() {}
      static isC(obj) {
        return #brand in obj && #method in obj && #getter in obj;
      }
    }
  presented:
    - date: January&#xA0;2021
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2021-01/jan-27.md#ergonomic-brand-checks
  has_specification: true
  description: EcmaScript proposal to provide brand checks without exceptions.
  authors:
    - Jordan Harband
  champions:
    - Jordan Harband
  has_specification: true
  presented:
    - date: "January\_2021"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2021-01/jan-27.md#ergonomic-brand-checks
- id: proposal-class-static-block
  title: Class Static Block
  authors:
    - Ron Buckton
  champions:
    - Ron Buckton
  description: Class static blocks provide a mechanism to perform additional static initialization during class definition evaluation. This is not intended as a replacement for public fields, as they provide useful information for static analysis tools and are a valid target for decorators. Rather, this is intended to augment existing use cases and enable new use cases not currently handled by that proposal.
  example: >-
    // "friend" access (same module)
    let A, B;
    {
      let friendA;

      A = class A {
        #x;

        static {
            friendA = {
              getX(obj) { return obj.#x },
              setX(obj, value) { obj.#x = value }
            };
        }
      };

      B = class B {
        constructor(a) {
          const x = friendA.getX(a); // ok
          friendA.setX(a, x); // ok
        }
      };
    }
  has_specification: true
  presented:
    - date: "March\_2021"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2021-03/mar-9.md#class-static-initialization-blocks
- id: proposal-error-cause
  title: Error Cause
  authors:
    - Chengzhong Wu
  champions:
    - Ron Buckton
    - Chengzhong Wu
    - Hemanth HM
  description: Errors will be constructed to represent runtime abnormalities. To help unexpected behavior diagnosis, errors need to be augmented with contextual information like error messages, error instance properties to explain what happened at the time.  If the error were thrown from deep internal methods, the thrown error may not be straightforward to be easily conducted without proper exception design pattern. This proposal introduces a convenient way to forward the cause.
  example: >-
    await fetch('//domain/upload', { method: 'POST', body: jobResult })
    .catch(err => {
      throw new Error('Upload job result failed', { cause: err });
    });
  has_specification: true
  presented:
    - date: "March\_2021"
- id: proposal-temporal
  title: Temporal
  authors:
    - Maggie Pint
    - Matt Johnson
    - Philipp Dunkel
  champions:
    - Maggie Pint
    - Matt Johnson
    - Philipp Dunkel
  description: Date has been a long-standing pain point in ECMAScript. This proposes Temporal, a global Object that acts as a top-level namespace (like Math), that brings a modern date/time API to the ECMAScript language. For a detailed breakdown of motivations, see  the proposal readme.
  example: >-
    // See the repo for detailed examples.
    // small example from the cook book

    const date = Temporal.now.plainDateISO(); // Gets the current date

    date.toString(); // returns the date in ISO 8601 date format

    // If you additionally want the time

    Temporal.now.plainDateTimeISO().toString(); // date and time in ISO 8601 format
  has_specification: true
  presented:
    - date: "March\_2021"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2021-03/mar-9.md#temporal-for-stage-3
