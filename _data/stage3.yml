- title: Legacy RegExp features in JavaScript
  id: proposal-regexp-legacy-features
  has_specification: false
  description: This is a specification draft for the legacy (deprecated) RegExp features in JavaScript, i.e., static properties of the constructor like RegExp.$1 as well as the RegExp.prototype.compile method.
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  tests:
    - https://github.com/tc39/test262/issues/1165
  presented:
    - date: May 2017
      url: https://github.com/tc39/notes/blob/master/meetings/2017-05/may-25.md#15ia-regexp-legacy-features-for-stage-3

- title: BigInt
  id: proposal-bigint
  has_specification: true
  description: Arbitrary precision integers in JavaScript
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
  tests:
    - https://github.com/tc39/test262/issues/1056
  example: >
    const theBiggestInt = 9007199254740991n;

    const alsoHuge = BigInt(9007199254740991);
    // ↪ 9007199254740991n

    const hugeButString = BigInt('9007199254740991');
    // ↪ 9007199254740991n
  presented:
    - date: May 2018
      url: https://github.com/tc39/notes/blob/master/meetings/2018-05/may-22.md#bigint-status-update

- title: import.meta
  id: proposal-import-meta
  has_specification: true
  description: A proposal for adding an import.meta metaproperty to JavaScript, for holding host-specific metadata about the current module.
  authors:
    - Domenic Denicola
  champions:
    - Domenic Denicola
  tests:
    - https://github.com/tc39/test262/issues/1342
  presented:
    - date: September 2017
      url: https://github.com/tc39/notes/blob/master/meetings/2017-09/sept-27.md#12iiic-importmeta-for-stage-3

- title: Private instance methods and accessors
  id: proposal-private-methods
  has_specification: true
  description: Keeping state and behavior private to a class lets library authors present a clear, stable interface, while changing their code over time behind the scenes.
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1343
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class Counter extends HTMLElement {
      #xValue = 0;

      get #x() { return #xValue; }
      set #x(value) {
        this.#xValue = value;
        window.requestAnimationFrame(this.#render.bind(this));
      }

      #clicked() {
        this.#x++;
      }

      constructor() {
        super();
        this.onclick = this.#clicked.bind(this);
      }

      connectedCallback() { this.#render(); }

      #render() {
        this.textContent = this.#x.toString();
      }
    }
    window.customElements.define('num-counter', Counter);

- title: Class Public Instance Fields & Private Instance Fields
  id: proposal-class-fields
  has_specification: true
  description: This proposes a combined vision for public fields and private fields, drawing on the earlier Orthogonal Classes and Class Evaluation Order proposals.
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
  champions:
    - Daniel Ehrenberg
    - Jeff Morrison
    - Kevin Smith
    - Kevin Gibbons
  tests:
    - https://github.com/tc39/test262/issues/1161
  example: >
    class Foo {
        instancePropertyBar = 0;
        static staticPropertyBar = 0;
        #privatePropertyBar = 0;
        static #privatePropertyBar = 0;

        set foo(value) { console.log(value); }
    }
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher

- title: Static class fields and private static methods
  id: proposal-static-class-features
  has_specification: true
  description: This proposal adds Static public fields, Static private methods and Static private fields
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
    - Jeff Morrison
    - Kevin Smith
  champions:
    - Shu-Yu Guo
    - Daniel Ehrenberg
  presented:
    - date: January 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-01/jan-30.md#private-fields-and-methods-refresher
  example: >
    class ColorFinder {
      static #red = "#ff0000";

      static #blue = "#00ff00";

      static #green = "#0000ff";

      // ^ static class fields

      static white = "white";

      // ^ static public field.

      static colorName(name) {
        switch (name) {
          case "red": return ColorFinder.#red;
          case "blue": return ColorFinder.#blue;
          case "green": return ColorFinder.#green;
          default: throw new RangeError("unknown color");
        }
      }

      // Static method ^

      static #setColor(name) {

      }
      // ^ Static private method
    }

- title: Numeric Separators
  id: proposal-numeric-separator
  has_specification: true
  description: This proposal adds the ability to utilize numeric literal separators for increased readability in Javascript source
  authors:
    - Sam Goto
    - Rick Waldron
  champions:
    - Sam Goto
    - Rick Waldron
  tests:
    - https://github.com/tc39/test262/pull/1189
    - https://github.com/tc39/test262/pull/1176
  example: >
    var a = 31_557_600;
    var b = 0b1111_1111;
    var c = 0xFF_FF_FF;
  presented:
    - date: March 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-03/mar-28.md



- title: Promise.allSettled
  id: proposal-promise-allSettled
  has_specification: true
  description: This proposal is to match popular usage in libraries, adds a method which returns a promise that is fulfilled with an array of promise state snapshots, but only after all the original promises have settled, i.e. become either fulfilled or rejected.
  authors:
    - Jason Williams
    - Robert Pamely
    - Mathias Bynens
  champions:
    - Mathias Bynens
  tests:
    - https://github.com/tc39/test262/pull/2124
  example: >
    const promises = [ fetch('index.html'), fetch('https://does-not-exist/') ];

    const results = await Promise.allSettled(promises);

    const successfulPromises = results.filter(p => p.status === 'fulfilled');

  presented:
    - date: March 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-03/mar-26.md

- title: Hashbang Grammar
  id: proposal-hashbang
  has_specification: true
  description: This proposal is to match de-facto usage in some CLI JS hosts that allow for Shebangs / Hashbang. Such hosts strip the hashbang in order to generate valid JS source texts before passing to JS engines currently. This would unify and standardize how that is done..
  authors:
    - Bradley Farias
  champions:
    - Bradley Farias
  tests:
    - https://github.com/tc39/test262/pull/2065
  example: >
    #!/usr/bin/env node

    // in the Script Goal

    'use strict';

    console.log(1);


    /****** begining of another script ********/

    #!/usr/bin/env node

    // in the Module Goal

    export {};

    console.log(1);

  presented:
    - date: November 2018
      url: https://github.com/tc39/notes/blob/master/meetings/2018-11/nov-28.md#hash-bang-grammar


- title: Top level await
  id: proposal-top-level-await
  has_specification: true
  description: Top-level await lets us rely on the module system itself to handle all of these promises, and make sure that things are well-coordinated.
  authors:
    - Myles Borins
  champions:
    - Myles Borins
  example: >
    // awaiting.mjs

    import { process } from "./some-module.mjs";

    const dynamic = import(computedModuleSpecifier);

    const data = fetch(url);

    export const output = process((await dynamic).default, await data);

    // usage.mjs

    import { output } from "./awaiting.mjs";

    export function outputPlusValue(value) { return output + value }

    console.log(outputPlusValue(100));

    setTimeout(() => console.log(outputPlusValue(100), 1000);

  presented:
    - date: June 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-06/june-6.md#top-level-await-for-stage-3

- title: Weakrefs
  id: proposal-weakrefs
  has_specification: true
  description: The Weakrefs proposal introduces a WeakRef class for weak references and a FinalizationGroup class for running user-defined finalizers after objects are garbage-collected.
  authors:
    - Dean Tribble
    - Sathya Gunasekaran
  champions:
    - Dean Tribble
    - Mark Miller
    - Till Schneidereit
    - Sathya Gunasekaran
  tests:
    - https://github.com/tc39/test262/pull/2192
  example: >
    // Fixed version that doesn't leak memory.

    function makeWeakCached(f) {

      const cache = new Map();

      const cleanup = new FinalizationGroup(iterator => {

        for (const key of iterator) {

          // See note below on concurrency considerations.

          const ref = cache.get(key);

          if (ref && !ref.deref()) cache.delete(key);
        }

      });

      return key => {

        const ref = cache.get(key);

        if (ref) {

          const cached = ref.deref();

          // See note below on concurrency considerations.

          if (cached !== undefined) return cached;

        }

        const fresh = f(key);

        cache.set(key, new WeakRef(fresh));

        cleanup.register(fresh, key, key);

        return fresh;

      };
    }

    var getImageCached = makeWeakCached(getImage);

  presented:
    - date: June 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-06/june-6.md#weakrefs

- title: Nullish Coalescing for JavaScript
  id: proposal-nullish-coalescing
  has_specification: true
  description: When performing property accesses, it is often desired to provide a default value if the result of that property access is null or undefined. At present, a typical way to express this intent in JavaScript is by using the `||` operator. This introduces a `??` operator.
  authors:
    - Gabriel Isenberg
    - Daniel Ehrenberg
    - Daniel Rosenwasser
  champions:
    - Gabriel Isenberg
    - Daniel Rosenwasser
    - Justin Ridgewell
  example: >
    const response = {

      settings: {

        nullValue: null,

        height: 400,

        animationDuration: 0,

        headerText: '',

        showSplashScreen: false

      }

    };

    const undefinedValue = response.settings.undefinedValue || 'some other default'; // result: 'some other default'

    const nullValue = response.settings.nullValue || 'some other default'; // result: 'some other default'

  presented:
    - date: July 2019

- title: RegExp Match array offsets
  id: proposal-regexp-match-indices
  has_specification: true
  description: ECMAScript RegExp Match Indicies provide additional information about the start and end indices of captured substrings relative to the start of the input string.
  authors:
    - Ron Buckton
  champions:
    - Ron Buckton
  example: >
    const re1 = /a+(?<Z>z)?/;

    // indices are relative to start of the input string:

    const s1 = "xaaaz";

    const m1 = re1.exec(s1);

    m1.indices[0][0] === 1;

    m1.indices[0][1] === 5;

    s1.slice(...m1.indices[0]) === "aaaz";


    m1.indices[1][0] === 4;

    m1.indices[1][1] === 5;

    s1.slice(...m1.indices[1]) === "z";


    m1.indices.groups["Z"][0] === 4;

    m1.indices.groups["Z"][1] === 5;

    s1.slice(...m1.indices.groups["Z"]) === "z";


    // capture groups that are not matched return `undefined`:

    const m2 = re1.exec("xaaay");

    m2.indices[1] === undefined;

    m2.indices.groups["Z"] === undefined;

  presented:
    - date: July 2019

- title: Optional Chaining
  id: proposal-optional-chaining
  has_specification: true
  description: The Optional Chaining Operator allows a developer to handle cases where if a property on an object is optional, they are able to check before accessing it.
  authors:
    - Claude Pache
    - Gabriel Isenberg
    - Dustin Savery
  champions:
    - Gabriel Isenberg
    - Dustin Savery
    - Justin Ridgewell
    - Daniel Rosenwasser
  example: >
    // Before

    var fooInput = myForm.querySelector('input[name=foo]')

    var fooValue = fooInput ? fooInput.value : undefined

    // After, with optional chaining

    var street = user.address?.street

    var fooValue = myForm.querySelector('input[name=foo]')?.value

  presented:
    - date: July 2019

- title: for-in mechanics
  id: proposal-for-in-order
  has_specification: true
  description: Partially specifying object enumeration order in JavaScript
  authors:
    - Kevin Gibbons
  champions:
    - Kevin Gibbons
  presented:
    - date: October 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-10/october-1.md#for-in-order-for-stage-3


- title: String.prototype.replaceAll
  id: proposal-string-replaceall
  has_specification: true
  description: introduce String.prototype.replaceAll
  authors:
    - Peter Marshall
    - Jakob Gruber
    - Mathias Bynens
  champions:
    - Mathias Bynens
  example: >
    const queryString = 'q=query+string+parameters';
    const withSpaces = queryString.replaceAll('+', ' ');
  presented:
    - date: October 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-10/october-2.md#stringprototypereplaceall-for-stage-3


- title: Promise.any
  id: proposal-promise-any
  has_specification: true
  description: Introduce String.prototype.replaceAll as a way to replace all in a string
  authors:
    - Mathias Bynens
    - Kevin Gibbons
    - Sergey Rubanov
  champions:
    - Mathias Bynens
  example: >
    try {
      const first = await Promise.any(promises);
      // Any of the promises was fulfilled.
    } catch (error) {
      // All of the promises were rejected.
    }
  presented:
    - date: October 2019
      url: https://github.com/tc39/notes/blob/master/meetings/2019-10/october-3.md#promiseany-reprise


- title: Atomics.waitAsync
  id: proposal-atomics-wait-async
  has_specification: true
  description: A proposal for an "asynchronous atomic wait" for ECMAScript, primarily for use in agents that are not allowed to block.
  authors:
    - Lars Hansen
  champions:
    - Shu-yu Guo
    - Lars Hansen
  presented:
    - date: December 2019
