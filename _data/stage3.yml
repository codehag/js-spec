- id: proposal-regexp-legacy-features
  authors:
    - Claude Pache
  champions:
    - Mark Miller
    - Claude Pache
  description: >-
    This is a specification draft for the legacy (deprecated) RegExp features in
    JavaScript, i.e., static properties of the constructor like
    <code>RegExp.$1</code> as well as the <code>RegExp.prototype.compile</code>
    method.
  has_specification: false
  presented:
    - date: "May\_2017"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2017-05/may-25.md#15ia-regexp-legacy-features-for-stage-3
  title: Legacy RegExp features in JavaScript
  tests:
    - https://github.com/tc39/test262/pull/2650
- id: proposal-private-methods
  authors:
    - Daniel Ehrenberg
  champions:
    - Daniel Ehrenberg
    - Kevin Gibbons
  description: >-
    Keeping state and behavior private to a class lets library authors present a
    clear, stable interface, while changing their code over time behind the
    scenes.
  example: |-
    class Counter extends HTMLElement {
      #xValue = 0;

      get #x() { return #xValue; }
      set #x(value) {
        this.#xValue = value;
        window.requestAnimationFrame(this.#render.bind(this));
      }

      #clicked() {
        this.#x++;
      }

      constructor() {
        super();
        this.onclick = this.#clicked.bind(this);
      }

      connectedCallback() { this.#render(); }

      #render() {
        this.textContent = this.#x.toString();
      }
    }
    window.customElements.define(&#x27;num-counter&#x27;, Counter);
  has_specification: true
  presented:
    - date: "September\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-23.md#status-update-for-class-fields-private-methods-static-class-features
  title: Private instance methods and accessors
  tests:
    - >-
      https://github.com/tc39/test262/pulls?q=is%3Apr+is%3Aclosed+private+methods
- id: proposal-class-fields
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
  champions:
    - Daniel Ehrenberg
    - Jeff Morrison
    - Kevin Smith
    - Kevin Gibbons
  description: >-
    This proposes a combined vision for public fields and private fields,
    drawing on the earlier Orthogonal Classes and Class Evaluation Order
    proposals.
  example: |-
    class X {
      #foo;
      method() {
        console.log(this.#foo)
      }
    }
  has_specification: true
  presented:
    - date: "September\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-23.md#status-update-for-class-fields-private-methods-static-class-features
  title: Class Public Instance Fields &amp; Private Instance Fields
  tests:
    - https://github.com/tc39/test262/pulls?q=is%3Apr+is%3Aclosed+private+fields
- id: proposal-static-class-features
  authors:
    - Daniel Ehrenberg
    - Kevin Gibbons
    - Jeff Morrison
    - Kevin Smith
  champions:
    - Shu-Yu Guo
    - Daniel Ehrenberg
  description: >-
    A proposal to add three features to JavaScript classes, building on the
    previous class fields and private methods proposals.
  example: |-
    class ColorFinder {
      static #red = &#x22;#ff0000&#x22;;
      static #green = &#x22;#00ff00&#x22;;
      static #blue = &#x22;#0000ff&#x22;;
      
      static colorName(name) {
        switch (name) {
          case &#x22;red&#x22;: return ColorFinder.#red;
          case &#x22;blue&#x22;: return ColorFinder.#blue;
          case &#x22;green&#x22;: return ColorFinder.#green;
          default: throw new RangeError(&#x22;unknown color&#x22;);
        }
      }
      
      // Somehow use colorName
    }
  has_specification: true
  presented:
    - date: "September\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-23.md#status-update-for-class-fields-private-methods-static-class-features
  title: Static class fields and private static methods
  tests:
    - https://github.com/tc39/test262/pulls?q=is%3Apr+is%3Aclosed+static+fields
- id: proposal-hashbang
  authors:
    - Bradley Farias
  champions:
    - Bradley Farias
  description: >-
    This proposal is to match de-facto usage in some CLI JS hosts that allow for
    Shebangs / Hashbang. Such hosts strip the hashbang in order to generate
    valid JS source texts before passing to JS engines currently. This would
    unify and standardize how that is done.
  example: |-
    #!/usr/bin/env node
    // in the Module Goal
    export {};
    console.log(1);
  has_specification: true
  presented:
    - date: "November\_2018"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2018-11/nov-28.md#hash-bang-grammar
  title: Hashbang Grammar
  tests:
    - https://github.com/tc39/test262/pull/2065
- id: proposal-top-level-await
  authors:
    - Myles Borins
  champions:
    - Myles Borins
  description: >-
    Top-level <code>await</code> enables modules to act as big async functions.
    With top-level <code>await</code>, ECMAScript Modules (ESM) can await
    resources, causing other modules who import them to wait before they start
    evaluating their body.
  example: |-
    // file.html
    &#x3C;script type=module src=&#x22;a.mjs&#x22;&#x3E;&#x3C;/script&#x3E;

    // a.mjs
    await import(&#x22;./b.mjs&#x22;);

    // b.mjs
    await import(&#x22;./a.mjs&#x22;);
  has_specification: true
  presented:
    - date: "June\_2019"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2019-06/june-6.md#top-level-await-for-stage-3
  title: Top-level <code>await</code>
  tests:
    - https://github.com/tc39/test262/pull/2274
- id: proposal-regexp-match-indices
  authors:
    - Ron Buckton
  champions:
    - Ron Buckton
  description: >-
    ECMAScript RegExp Match Indicies provide additional information about the
    start and end indices of captured substrings relative to the start of the
    input string.
  example: |-
    const re1 = /a+(?&#x3C;Z&#x3E;z)?/;

    // indices are relative to start of the input string:
    const s1 = &#x22;xaaaz&#x22;;
    const m1 = re1.exec(s1);
    m1.indices[0][0] === 1;
    m1.indices[0][1] === 5;
    s1.slice(...m1.indices[0]) === &#x22;aaaz&#x22;;

    m1.indices[1][0] === 4;
    m1.indices[1][1] === 5;
    s1.slice(...m1.indices[1]) === &#x22;z&#x22;;

    m1.indices.groups[&#x22;Z&#x22;][0] === 4;
    m1.indices.groups[&#x22;Z&#x22;][1] === 5;
    s1.slice(...m1.indices.groups[&#x22;Z&#x22;]) === &#x22;z&#x22;;

    // capture groups that are not matched return &#x60;undefined&#x60;:
    const m2 = re1.exec(&#x22;xaaay&#x22;);
    m2.indices[1] === undefined;
    m2.indices.groups[&#x22;Z&#x22;] === undefined;
  has_specification: false
  presented:
    - date: "November\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-16.md#regexp-matches-indices-jsc-implementation-feedback
  title: RegExp Match Indices
  tests:
    - https://github.com/tc39/test262/pull/2309
- id: proposal-atomics-wait-async
  authors:
    - Lars Hansen
  champions:
    - Shu-yu Guo
    - Lars Hansen
  description: >-
    A proposal for an &ldquo;asynchronous atomic wait&rdquo; for ECMAScript,
    primarily for use in agents that are not allowed to block.
  has_specification: true
  presented:
    - date: "December\_2019"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2019-12/december-4.md#atomicswaitasync-for-stage-3
  title: <code>Atomics.waitAsync</code>
  tests:
    - https://github.com/tc39/test262/issues/2511
- id: proposal-relative-indexing-method
  authors:
    - Shu-yu Guo
    - Tab Atkins
  champions:
    - Shu-yu Guo
    - Tab Atkins
  description: >-
    A proposal to add a <code>.at()</code> method to all the basic indexable
    classes (<code>Array</code>, <code>String</code>, <code>TypedArray</code>).
  example: |-
    var list = [&#x22;apple&#x22;, &#x22;orange&#x22;, &#x22;banana&#x22;];
    list.at(-1) // banana, using negative index
    list.at(0)  // apple
    list.at(1)  // orange
    list.at(2)  // banana
  has_specification: true
  presented:
    - date: "November\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-17.md#item-rename--revisit-inclusion-on-string
  title: <code>.at()</code>
  tests:
    - https://github.com/tc39/test262/pull/2812
- id: proposal-import-assertions
  authors:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
  champions:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
  description: A proposal for syntax to import ES modules with assertions.
  example: >-
    new Worker(&#x22;foo.wasm&#x22;, { type: &#x22;module&#x22;, assert: { type:
    &#x22;webassembly&#x22; } });
  has_specification: true
  presented:
    - date: "November\_2020"
      url: >-
        https://github.com/tc39/notes/blob/master/meetings/2020-11/nov-17.md#import-assertions-status-update
  title: Import Assertions
- id: proposal-json-modules
  authors:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
  champions:
    - Myles Borins
    - Sven Sauleau
    - Dan Clark
    - Daniel Ehrenberg
  description: A proposal to import JSON files as modules.
  example: |-
    import json from &#x22;./foo.json&#x22; assert { type: &#x22;json&#x22; };
    import(&#x22;foo.json&#x22;, { assert: { type: &#x22;json&#x22; } });
  has_specification: true
  presented:
    - date: "January\_2021"
  title: JSON Modules
- id: proposal-private-fields-in-in
  authors:
    - Jordan Harband
  champions:
    - Jordan Harband
  description: A proposal to provide brand checks without exceptions.
  example: |
    class C {
      #brand;

      static isC(obj) {
        try {
          obj.#brand;
          return true;
        } catch {
          return false;
        }
      }
    }
  has_specification: false
  presented:
    - date: "January\_2021"
  title: Ergonomic brand checks for Private Fields
